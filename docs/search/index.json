[{"categories":["emacs","elisp"],"contents":" Locally creating a branch for a PR Getting references to all Pull Requests Automatically adding PR refs Summary References I have a few public projects in git repos, but I don\u0026rsquo;t get that much traffic in Pull Requests (PR) Gitlab calls these Merge Requests or MRs. . So when I need to add additional commits to a PR, I would just add the PR author\u0026rsquo;s remote to my local repo, check out their PR branch, add my own commits and then merge that to my project\u0026rsquo;s main branch. As these occurrences were few and far apart, I didn\u0026rsquo;t have a need to view the PR branches directly from within Emacs/Magit. Though, I somehow knew that each GitHub Pull Request\u0026rsquo;s HEAD got assigned a git reference. But I didn\u0026rsquo;t need to use that knowledge until today :smiley:. Today, when discussing PR # 20 on Prot\u0026rsquo;s Denote package\u0026rsquo;s GitHub mirror Prot uses SourceHut as the primary git forge for his Emacs packages. But I am glad that he doesn\u0026rsquo;t mind the activity in Issues and Pull Requests on the GitHub mirror. , he wrote this comment: Now I just need to figure out how best to incorporate your changes into the org-id branch so I can add the final bits. I am not too familiar with the PR workflow \u0026hellip; .. and that inspired this post today. Locally creating a branch for a PR\u0026nbsp;# From the GitHub docs, the git command to create a local branch for a PR is this: git fetch origin pull/ID/head:BRANCHNAME I have the denote package cloned from its GitHub mirror. So the origin remote\u0026rsquo;s url is https://github.com/protesilaos/denote. Make sure that the remote name used in this command is pointing to a GitHub repo, and not a mirror forge like GitLab or SourceHut. When I ran the below command, I got a new branch pr-20 pointing to the latest commit of that PR: git fetch origin pull/20/head:pr-20 Awesome! .. But that wasn\u0026rsquo;t good enough .. Now I wanted more .. I didn\u0026rsquo;t want to manually create a branch for each PR. Getting references to all Pull Requests\u0026nbsp;# Now that I was on that quest of \u0026ldquo;I want more\u0026rdquo;, it didn\u0026rsquo;t take me long to re-discover this 7-year old nugget by Oleh Krehel. Here are the relevant bits from that post: Open the local repo\u0026rsquo;s .git/config file. Find the [remote \u0026quot;origin\u0026quot;] section Modify it by adding this one line with pull refs. This is the same for all GitHub repositories. [remote \u0026#34;origin\u0026#34;] url = https://github.com/USER/REPO.git fetch = +refs/heads/*:refs/remotes/origin/* fetch = +refs/pull/*/head:refs/pull/origin/* With that edit in place, when I did l a (show the log for all git references), followed by f a (fetch all the remotes) in the Magit, I could see the references to the denote repo\u0026rsquo;s PRs! Figure 1: Viewing PR references from denote package\u0026rsquo;s GitHub repo .. But that still wasn\u0026rsquo;t good enough .. I didn\u0026rsquo;t want to manually edit the .git/config in each repo. Automatically adding PR refs\u0026nbsp;# Of course, I wasn\u0026rsquo;t the first one to think of this! Another Emacs veteran Artur Malabarba had already had this covered also around 7 years back. Coincidentally, that post was written as a response to that same blog post by Oleh where he shared the above .git/config tip. In that post, Artur shares an Emacs Lisp function that uses Magit functions like magit-get, magit-get-all and magit-git-string to auto-add the fetch = +refs/pull/*/head:refs/pull/origin/* line in the .git/config. This magic happens after checking that the origin remote points to a GitHub repo, and if that line doesn\u0026rsquo;t already exist. Here, I am lightly modifying the function shared in that post so that the origin remote name is not hard-coded The reason is that sometimes, I name the original remote as upstream and my fork as fork, and I might have no remote named origin. . Credit for the main logic in this code still goes to Artur. (defun modi/add-PR-fetch-ref (\u0026amp;optional remote-name) \u0026#34;If refs/pull is not defined on a GH repo, define it. If REMOTE-NAME is not specified, it defaults to the `remote\u0026#39; set for the \\\u0026#34;main\\\u0026#34; or \\\u0026#34;master\\\u0026#34; branch.\u0026#34; (let* ((remote-name (or remote-name (magit-get \u0026#34;branch\u0026#34; \u0026#34;main\u0026#34; \u0026#34;remote\u0026#34;) (magit-get \u0026#34;branch\u0026#34; \u0026#34;master\u0026#34; \u0026#34;remote\u0026#34;))) (remote-url (magit-get \u0026#34;remote\u0026#34; remote-name \u0026#34;url\u0026#34;)) (fetch-refs (and (stringp remote-url) (string-match \u0026#34;github\u0026#34; remote-url) (magit-get-all \u0026#34;remote\u0026#34; remote-name \u0026#34;fetch\u0026#34;))) ;; https://oremacs.com/2015/03/11/git-tricks/ (fetch-address (format \u0026#34;+refs/pull/*/head:refs/pull/%s/*\u0026#34; remote-name))) (when fetch-refs (unless (member fetch-address fetch-refs) (magit-git-string \u0026#34;config\u0026#34; \u0026#34;--add\u0026#34; (format \u0026#34;remote.%s.fetch\u0026#34; remote-name) fetch-address))))) (add-hook \u0026#39;magit-mode-hook #\u0026#39;modi/add-PR-fetch-ref) Summary\u0026nbsp;# With the above snippet added to your Emacs config and evaluated, each time you visit a repo cloned from GitHub in the Magit Status buffer (M-x magit-status), the PR refs will get auto-added to that repo\u0026rsquo;s .git/config if needed. After that, you can easily view the commits from all the PRs by doing l a f a. References\u0026nbsp;# oremacs \u0026ndash; Some git/magit/github tricks endlessparentheses \u0026ndash; Automatically configure Magit to access Github PRs GitHub \u0026ndash; Checking out PR branches locally ","permalink":"/examples/code-blocks/more-from-dude/","tags":["git","magit","100DaysToOffload","github","git-reference"],"title":"View GitHub Pull Requests in Magit"},{"categories":["unix","Linux"],"contents":"","permalink":"/posts/foo-barski/","tags":["Arch-Linux"],"title":"An ode to Arch-Linux"},{"categories":["unix"],"contents":" h1\u0026nbsp;# h2\u0026nbsp;# h3\u0026nbsp;# h4\u0026nbsp;# ","permalink":"/notes/foo-barski/","tags":["ramblings"],"title":"this is starting to not suck"}]